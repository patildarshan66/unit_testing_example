on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

name: "Test, Build & Release"
jobs:
  build:
    name: Test, Build & Release
    runs-on: macos-latest
    env:
      # Setup env variables that will be used throughout the workflow
      JAVA_VERSION: 11.0.22+7
      FLUTTER_VERSION: 3.10.5
      AAB_PATH: build/app/outputs/bundle/release/app-release.aab
#      KEYSTORE_PATH: android/upload-keystore.jks
#      KEY_PROPS_PATH: android/key.properties
#      SERVICE_ACCOUNT_PATH: store_credentials.json

    steps:
      # Checkout repository codebase
      - name: Checkout the code
        uses: actions/checkout@v3

      # Setup Java in the VM
      - name: Setup Java to compile the Android project
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      # Setup Flutter in the VM
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          # optional parameters follow
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path

#      # Decode Android env variables
#      - name: Decode Android keystore
#        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}
#
#      - name: Decode Android key properties
#        run: echo "${{ secrets.ANDROID_KEY_PROPERTIES }}" | base64 --decode > ${{ env.KEY_PROPS_PATH }}
#
#      # Decode Android release Service Account
#      - name: Decode Android Service Account
#        run: echo "${{ secrets.PRODUCTION_CREDENTIAL_FILE }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}

      # Run flutter commands
      - name: Run flutter pub get
        run: flutter pub get

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🕵️ Analyze to check for bad Dart/Flutter practices
        run: flutter analyze

      - name: 📉 Run all app tests
        run: flutter test

      - name: Build Release APK
        run: flutter build apk --release

      # Build Android Bundle release file
      - name: Build aab
        run: |
          flutter build appbundle
          --release

#      - run: flutter build apk --release --split-per-abi
#      - run: |
#          flutter build ios --no-codesign
#          cd build/ios/iphoneos
#          mkdir Payload
#          cd Payload
#          ln -s ../Runner.app
#          cd ..
#          zip -r app.ipa Payload
      # Upload generated aab to project artifacts
      - name: Upload generated aab to the artifacts
        uses: actions/upload-artifact@master
        with:
          name: aab-stores
          path: {{ env.AAB_PATH }}

#      # Deploy bundle to Google Play internal testing
#      - name: Deploy to Play Store (Internal testing)
#        uses: r0adkll/upload-google-play@v1
#        with:
#          serviceAccountJson: {{ env.SERVICE_ACCOUNT_PATH }}
#          packageName: com.yourapp.package
#          releaseFiles: {{ env.AAB_PATH }}
#          track: internal